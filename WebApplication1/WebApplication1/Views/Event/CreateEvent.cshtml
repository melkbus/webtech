@model WebApplication1.Models.EventCreateViewModel

@{
    ViewBag.Title = "Create Event";
}

@using (Html.BeginForm("FileUpload", "Event", FormMethod.Post, new { enctype = "multipart/form-data", onsubmit = "validateForm(event)" }))
{
    <hr />
    <h2 style="margin-top:50px; margin-left:10px">Create your own event!</h2>

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.EventName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EventName, new { htmlAttributes = new { @class = "form-control", @maxlength = "20" } })
                    @Html.ValidationMessageFor(model => model.EventName, "", new { @class = "text-danger", id = "errorEventName" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.EventDescription, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.EventDescription, new { htmlAttributes = new { @class = "form-control", @maxlength = "300" } })
                    @Html.ValidationMessageFor(m => m.EventDescription, "", new { @class = "text-danger", id = "errorEventDescription" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.TagName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.TagName, new { htmlAttributes = new { @class = "form-control", @id = "Tags", @style = "width:30%" } })
                    @Html.ValidationMessageFor(m => m.TagName, "", new { @class = "text-danger" })
                    <script>
                        $(function () {
                            $('#Tags').tokenfield({
                                autocomplete: {
                                    source: ['Sports', 'Food', 'Party', 'Conference', 'Meeting', 'Team Building', 'Trade',
                                                'Press Conference', 'Buisiness Dinner', 'Opening Ceremonies', 'VIP Events',
                                                'Wedding', 'BirthDay', 'Family Events'
                                    ],
                                    delay: 100,
                                    delimiter: ''
                                },
                                showAutocompleteOnFocus: true,
                                limit: 5
                            });
                        });
                    </script>

                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.EventBeginDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.EventBeginDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.EventBeginDate, "", new { @class = "text-danger error-msg", id = "errorBeginDate" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.EventBeginTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.EventBeginTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.EventBeginTime, "", new { @class = "text-danger error-msg", id = "errorBeginTime" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.EventEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.EventEndDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.EventEndDate, "", new { @class = "text-danger error-msg", id = "errorEndDate" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.EventEndTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.EventEndTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.EventEndTime, "", new { @class = "text-danger error-msg", id = "errorEndTime" })

                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.EventLocation, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.EventLocation, new { htmlAttributes = new { @class = "form-control", id = "Location" } })
                    @Html.ValidationMessageFor(m => m.EventLocation, "", new { })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.EventPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(m => m.EventPrice, new { htmlAttributes = new { @class = "form-control", min = "0" } })
                    @Html.ValidationMessageFor(m => m.EventPrice, "", new { @class = "text-danger" })
                </div>
            </div>

            <div style="margin-left:135px; margin-bottom:10px" class="form-inline">
                <span class="form-group"><label>Picture</label></span>
                <span class="form-group" style="margin-left:40px"><input type="file" accept="image/*" aria-label="photo" name="ImageUpload" id="ImageUpload" /></span>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>

        <div>
            @Html.ActionLink("Back to Homepage", "Index")
        </div>
}
<script type="text/javascript">

    var input = document.getElementById('Location');

    google.maps.event.addDomListener(input, 'keydown', function (e) {
        if (e.keyCode == 13) {
            e.preventDefault();
        }
    });
    google.maps.event.addDomListener(window, 'load', function () {
        var places = new google.maps.places.Autocomplete(input);
    });


    function validateForm(event) {

        //validate EventName
        event = event || window.event || event.srcElement;
        var name = document.getElementById("EventName");
        var errorEventName = document.getElementById("errorEventName");
        if (name.value.length > 20) {
            errorEventName.innerHTML = "name fault: min-length = 1, max-length = 20";
            event.preventDefault();
        } else { errorEventName.innerHTML = ""; };

        if (name.value.length == 0) {
            errorEventName.innerHTML = "Name is required";
            event.preventDefault();
        } else { errorEventName.innerHTML = ""; };

        //validate EventDescription
        var description = document.getElementById("EventDescription");
        var errorEventDescription = document.getElementById("errorEventDescription");
        if (description.value.length > 300) {
            errorEventDescription.innerHTML = "description fault: min-length = 1, max-length = 300";
            event.preventDefault();
        } else { errorEventDescription.innerHTML = ""; };

        if (description.value.length == 0) {
            errorEventDescription.innerHTML = "description is required";
            event.preventDefault();
        } else { errorEventDescription.innerHTML = ""; };

        //Date
        now = new Date();
        var EventBeginDate = document.getElementById("EventBeginDate");
        var errorBeginDate = document.getElementById("errorBeginDate");
        var startDate = EventBeginDate.value;
        alert("begin: " + startDate)

        var EventEndDate = document.getElementById("EventEndDate");
        var errorEndDate = document.getElementById("errorEndDate");
        var endDate = EventEndDate.value;
        
        //validate EventBeginDate
        if (startDate < moment.now() || !startDate) {
            errorBeginDate.innerHTML = "Begin date is required, enter a date in the future";
            event.preventDefault();
        } else { errorBeginDate.innerHTML = ""; };

        //validate EventEndDate
        if (startDate >  endDate || !endDate) {
            errorEndDate.innerHTML = "End date is required, end-date must be after Begin-date";
            event.preventDefault();
        } else { errorEndDate.innerHTML = ""; };

        //Time
        var EventBeginTime = document.getElementById("EventBeginTime").value;
        var errorBeginTime = document.getElementById("errorBeginTime").value;
        var EventEndTime = document.getElementById("EventEndTime").value;
        var errorEndTime = document.getElementById("errorEndTime").value;
        alert("Begintime" + EventBeginTime)
        if (!EventBeginTime) {
            errorBeginTime.innerHTML = "Begin time required"
            event.preventDefault();
        } else errorBeginTime.innerHTML = "";

        if (!EventEndTime) {
            errorEndTime.innerHTML = "End time required"
            event.preventDefault();
        } else errorBeginTime.innerHTML = "";

        return true;
    };


</script>